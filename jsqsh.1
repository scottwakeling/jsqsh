.TH jsqsh 1 "May 2015"
.SH NAME
jsqsh \- The universal sql shell.

.SH SYNOPSIS
.B jsqsh [options] [connection-name]
[\fBinit]

.B jsqsh
[\fBremove] wiki

.SH DESCRIPTION
.PP
JSqsh (pronounced "jay-skwish") is a command line tool primarily intended
for working with relational databases systems.  It provides all of the
basic functionality such as entering and executing queries, display results
in a variety of formats, as well as a number of advanced features, such
as command line editing, history recall, piping of output to other commands,
I/O redirection and much more.

.SH OPTIONS

In the following sections, you will find a lot of options you may specify
to connect to a server (username, password, host, port, driver, etc.). To
avoid having to provide all of these options, jsqsh allow you to define a
named connection (or alias) for a set of connection properties and provides
a wizard for creating named connections.

-S, --setup
        Starts jsqsh's connection setup wizard. This will take you through a 
        series of steps to manage your named connections. One the connection
        wizard is complete you can use a named connection either by providing
        the connection name to jsqsh on startup:
                                   
            shell$ jsqsh mydb
                                                       
        or you can provide the name to the jsqsh \connect command at the
        jsqsh prompt:
        
            1> \connect mydb

.SH CONNECTION OPTIONS

The following options are all options available on the jsqsh command line
as well as to its "\connect" command, which may issue from the jsqsh prompt.
The presence of any of these options on the command line will cause jsqsh 
to automatically attempt to connect using the information provided, as 
if you had executed the "\connect" command.
               
In the help description below, you will see references to variables like
"${db}" or "${server}". When an option says that it sets a given variable,
what is referring to is that if you look at a driver definition using the
command "\drivers", like so:

    1> \drivers
    +-----------------+-------------+--------------------------------
    | Target          | Name        | URL                            
    +-----------------+-------------+--------------------------------
    | * MySQL         | mysql       | jdbc:mysql://${server}:${port} 
               
    The option may set one of these variables. Not all variables are meaningful
    or used by all drivers.
                        
    -d, --driver=driver 
            The name of the jsqsh driver definition that will be used for the 
            connection (use \drivers to see a list).
                                                      
    -S, --server=server 
            Sets the ${server} variable, which typically specifies the server name 
            to which you wish to connect.

    -p, --port=port 
            Sets the ${port} variable, which typically is the port on which the
            server is listening on for connections. Note that if not provided,
            most JDBC drivers defined within jsqsh will automatically select 
            a default port that is suitable for a default installation of the 
            server to which you are connecting.
    
    -D, --database=db   
            Sets the ${db} property. This will cause the database context to be 
            set to the provided database following connection to the server 
            (in the JDBC world the database context is known as the "catalog"). 
            Not all drivers support this behavior.
    
    -U, --username=user 
            Sets the ${user} property that determines the username that will be 
            utilized to connect to the database.

    -P, --password=pass 
            Sets the ${password} property that will be used to authenticate with 
            the server.
    
    -u, --jdbc-url=url
            This option allows you to provide an explicit JDBC URL to utilize
            when establishing the connection rather than using jsqsh's driver 
            mechanism. Typically use of this parameter also requires the use 
            of the --jdbc-class argument as well.
    
    -c, --jdbc-class=class 
            When utilizing a direct JDBC url (and not a jsqsh driver 
            definition), this should be utilized to define which JDBC driver 
            class will be utilized for the connection.
    
    -w, --domain=domain 
            For Windows based authentication, sets the ${domain} property,
            specifying the windows domain to be utilized when establishing 
            the connection. 
            Not all JDBC drivers support this functionality.
    
    -O, --prop=name=value 
            This option allows JDBC driver properties to be explicitly set prior 
            to connecting, and may be listed more than once. For example: 
            
                \connect --prop compress=true --prop failover=false
            
            The set of properties that are available are specific to a given JDBC 
            driver, so you'll need to consult the documentation for your driver 
            for details.
    
    connection-name 
        If provided, this indicates the logical connection name that should be 
        used to establish the connection. If additional arguments are provided, 
        then they will override the same options associated with the logical 
        connection name. See "\help connect" for details on named connections.

.SH
GENERAL OPTIONS

    The following command line options are supported by jsqsh.
    
    -C, --config-dir=dir
            The --config-dir option can be used to specify a directory containing
            jsqsh configuration files (see START UP, above). This directory will
            be processed in addition (and following) $HOME/.jsqsh.  This option
            may be provided more than once if you wish to read multiple
            configuration directories.

    -e, --echo
            Causes all input to be echoed to the screen. This is particularly
            useful with the --input-file (-i) option, if you wish to see the 
            supplied input along with the output of the commands.

    -i, --input-file=filename
            Indicates that input will be provided from an input file rather than
            reading from interactive input from a user. 

            This option may be provided more than once on the command line, and 
            input will be read from all files that are provided in the order 
            that they are provided. It is important to note that each input file 
            is processed within the same physical jsqsh session. This means that 
            configuration options or variables that are set by one input file can 
            affect the following input file.

            If the filename provided is "-" that indicates that the input should
            be read interactively from the user (from "stdin"). This option is
            useful if you wish to execute a "setup" script before supplying input,
            like so:

            jsqsh -i setup.sql -i -
            ...
            1> 

            will read and execute the contents of setup.sql, then prompt the user
            for interactive input.

    -n, --non-interactive
            When input is read from a file (--input-file), the input is
            automatically considered non-interactive, and the following
            functionality is disabled:

            * Display of the welcome banner
            * Display of the prompt
            * Recording of line editor line history 
            * Recording of statement history

            When input is read from stdin, however, jsqsh cannot detect if the 
            input is actual user input or is redirected input from a file,
            like so:

            jsqsh < input.sql

            so the --non-interactive flag may be used to force non-interactive
            behavior when it isn't desirable.

    -o, --output-file=filename
            Causes output to be redirected to an output file rather than the users
            screen. Note that error output continues to go to the screen (stderr).

    -R, --drivers=file
            The --drivers option can be used to explicitly load additional JDBC
            driver definition files.  The driver definition file teaches jsqsh
            how to load a given JDBC driver without the user having to provide
            a full JDBC URL and driver class name.  Once jsqsh is started an 
            example template for a driver definition file is placed in your
            $HOME/.jsqsh/drivers.xml.  This option may be provided more than
            once if you wish to load multiple driver definition files.

    -v, --var=name=value
            The --var (-v) option may be used to explicitly set or define a 
            jsqsh variable. For example, if you wish to enable variable expansion
            during SQL execution you can do any one of the following:

            jsqsh --var expand=true
            jsqsh --var=expand=true
            jsqsh -vexpand=true
            jsqsh -v expand=true

            This option may be provided more than once to set multiple variables.

    -X, --exit=exit-value
            The --exit flag determines how jsqsh computes its final exit status.
            The default is "total", in which the final exit code is the total
            number of failures seen during the session.  A value of "last"
            indicates that the the exit status should be that of the last executed
            command (an explicit "\quit" command is excluded from consideration).

.SH
START UP

    Upon startup, jsqsh performs the following activities:

    1. If $HOME/.jsqsh doesn't exist, it is created and populated with two
       files, driver.xml and sqshrc. These files are described below.
    2. If $HOME/.jsqsh/drivers.xml file is present, it is loaded. This file 
       can be used to define JDBC drivers to jsqsh that it does not 
       understand natively. The default drivers.xml file is empty, but has 
       lots of comments and examples describing the format.
    3. If $HOME/.jsqsh/sqshrc is read if present. This file main contain any
       jsqsh command or directive, and is typically used to set default
       configuration variables, classpath settings, aliases, etc.
    4. If $HOME/.jsqsh/history.xml is present it is loaded. This file contains
       your previous query execution history (see "\help history").
    5. Any additional configuration directories specified with --config-dir (-C)
       (see below) are processed in the same fashion as steps #2-#4.
    6. Any additional driver definition files specified with --drivers (-R)
       (see below) are loaded.
    7. If any connection options were provided (see CONNECTION OPTIONS, below)
       an attempt is made to connect with the driver. If this fails, jsqsh
       exits.
    8. The jsqsh prompt is presented (in interactive mode) or input is processed
       if --input-file (-i) was provided.

.SH FILES

.jsqsh

.fi

